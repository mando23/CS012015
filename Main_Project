/*
 * Project_test.c
 *
 * Created: 06/06/2015 06:52:45 p. m.
 *  Author: armando
 */ 

#pragma region PROJECT

/*****************PROYECTO****************************/


#include <avr/io.h>
#include <avr/interrupt.h>
#include <stdbool.h>
#include <stdio.h>
#include <string.h>
#include <avr/pgmspace.h>
#include <util/delay.h>
#include <math.h>

//////General settings for clock and USART

#define F_CPU 1000000UL
#define BAUD 4800UL
#define UBRR ((F_CPU / (16* BAUD)) -1)

//////Declaration of methods used in program

void catch_text_uart();
void lcd_enter_text();
void option_setup();
void lcd_ready();
void setup_state();
void main_action_one_sequence();
void main_action_loop_sequence();
void main_action_sequence();
void printing_state();
void Running_state();
void option_state();
unsigned char USART_RECEIVE_CHARACTER();
void ADCConvert();
void Motor1();
void SPIcom();
void Latching();
void Strobe();
void Motor2();
void Delay();
void paper_feed();

//////Global variables

unsigned char text_uart[101];		//Variable: text; Type: char[100]; Use: Saves text line from Terminal
volatile double timer_overflow_count;		//Variable: timer_overflow_count; Type: Volatile; Use: Count number of overflow from the timer
bool main_action_sequence_global_bool = false;		//Variable main_action_sequence_global_bool; Type: bool; Use: Set the direction of the program
bool bool_printing = false;		//Variable: bool_printing; Type: bool; Use: Enables/Disables printing option
bool bool_buzzer = false;		//Variable: bool_buzzer; Type: bool; Use: Enables/Disables buzzer option
bool bool_LEDs = false;			//Variable: bool_LEDs; Type: bool; Use: Enables/Disables LEDs option
static const char text_code[] PROGMEM = "abcdefghijklmnopqrstuvwxyz .";		//Code used for translation
char const a[] PROGMEM = ".-4";
char const b[] PROGMEM = "-...4";
char const c[] PROGMEM = "-.-.4";
char const d[] PROGMEM = "-..4";
char const e[] PROGMEM = ".4";
char const f[] PROGMEM = "..-.4";
char const g[] PROGMEM = "--.4";
char const h[] PROGMEM = "....4";
char const i[] PROGMEM = "..4";
char const j[] PROGMEM = ".---4";
char const k[] PROGMEM = "-.-4";
char const l[] PROGMEM = ".-..4";
char const m[] PROGMEM = "--4";
char const n[] PROGMEM = "-.4";
char const o[] PROGMEM = "---4";
char const p[] PROGMEM = ".--.4";
char const q[] PROGMEM = "--.-4";
char const r[] PROGMEM = ".-.4";
char const s[] PROGMEM = "...4";
char const t[] PROGMEM = "-4";
char const u[] PROGMEM = "..-4";
char const v[] PROGMEM = "...-4";
char const w[] PROGMEM = ".--4";
char const x[] PROGMEM = "-..-4";
char const y[] PROGMEM = "-.--4";
char const z[] PROGMEM = "--..4";
char const SPACE[] PROGMEM = "444";
char const end_point[] PROGMEM = "5";
int count;
double volt, digital, r1, temp;
uint8_t ijp;
uint8_t data [48];	// 48 byte array
volatile uint8_t count2, mode = 0, num = 0, finish = 0;;		//Variables for Thermal Printer
volatile uint16_t delay_local;

PGM_P const string_table[] PROGMEM = 
{
	a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, SPACE  
};


unsigned char translated_text[1000];

//////Timer0 overflow method

ISR(TIMER0_OVF_vect)
{
	if (main_action_sequence_global_bool)
	{
		if (!(PIND & (1 << (3))))
		main_action_sequence_global_bool = false;
	}
	else
	{
		timer_overflow_count ++;			//Counts number of overflows for Toggle
		if (timer_overflow_count == 488)	//Value of overflows for 1 sec
		{
			PORTA ^= 0b00000001;				//Toggle ready LED
			timer_overflow_count = 0;		//Resets timer overflow count for the next toggle
		}
	}
}

//////Timer2 interruption method

ISR(TIMER2_COMP_vect)
{

}

//////Main method


int main (void)
{
	
	//////Setup of IO

	DDRC = 0b11111111;		//PORTC setup
	PORTC = 0b00000000;		//PORTC initial conditions
	DDRA = 0b01111001;		//PORTA setup
	PORTA = 0b10000110;		//PORTA initial conditions
	DDRB = 0b10110011;		//PORTB setup
	PORTB = 0b01001100;		//PORTB initial conditions
	DDRD &= (0 << PD3 );	//PIN PD3 setup
	PORTD |= (1 << PD3 );	//PIN PD3 initial conditios
	

	//////Setup of LCD

	lcd_init(0x0C);lcd_clrscr();

	//////Setup of Serial communication

	UBRRH &= ~(1 << URSEL);// must be 0 in order to write to UBRRH
	UBRRH = UBRR >> 8;
	UBRRL = UBRR & 0xFF;
	UCSRC |= (1<<URSEL) | (1<<UCSZ1) | (UCSZ0);// URSEL must be 1 in order to write to UCSRC
	UCSRB |= (1<<RXEN) | (1<<TXEN);// Enable Transmitter and Receiver
	
	//////ADC inicialization
	ADMUX = 0b01000111;
	ADCSRA = 0b10000000;
	
	//////Enable SPI, master mode, clock rate fck/16
	SPCR = 0b01010001;
	PORTB |= (1 << PORTB4);	//Turn on PORTB4, necessary for the SPI communication

	//////Setup for timers

	TCCR0 = 0b00000010;
	TCCR2 = 0b00001010;
	TIMSK = 0b00000000;
	TCNT0 = 0;
	OCR2 = 128;
	sei();
	
	//////Main loop

	while (1)
	{

		lcd_enter_text_state();
		
		catch_text_uart();
		
		lcd_ready_state();
		
		setup_state();
		
		option_state();
		
		option_setup();
		
		if (main_action_sequence_global_bool)
		{
		
			Running_state();
		
			main_action_loop_sequence();
		
		}
		
		else
		
		{
		
			Running_state();
		
			main_action_one_sequence();
		
			printing_state();
		
			paper_feed();
			
		}
		
		
	}
}


//////Definition of methods used in program

void catch_text_uart()		//Receives text from Terminal
{
	bool catch_text_done = true;	//Boolean trigger of method
	char temp;
	count = 0;
	do 
	{
		temp = USART_RECEIVE_CHARACTER();	//Catches one character from Terminal
		if (temp == 'a')					//Compares character with current letter
		{
			text_uart[count] = 'a';			//Saves value of character to global variable
			count = count +1;
			strcat(translated_text,a);		//Saves translated value of character to global variable
		}
		if (temp == 'b')
		{
			text_uart[count] = 'b';
			count = count +1;
			strcat(translated_text,b);
		}
		if (temp == 'c')
		{
			text_uart[count] = 'c';
			count = count +1;
			strcat(translated_text,c);
		}
		if (temp == 'd')
		{
			text_uart[count] = 'd';
			count = count +1;
			strcat(translated_text,d);
		}
		if (temp == 'e')
		{
			text_uart[count] = 'e';
			count = count +1;
			strcat(translated_text,e);
		}
		if (temp == 'f')
		{
			text_uart[count] = 'f';
			count = count +1;
			strcat(translated_text,f);
		}
		if (temp == 'g')
		{
			text_uart[count] = 'g';
			count = count +1;
			strcat(translated_text,g);
		}
		if (temp == 'h')
		{
			text_uart[count] = 'h';
			count = count +1;
			strcat(translated_text,h);
		}
		if (temp == 'i')
		{
			text_uart[count] = 'i';
			count = count +1;
			strcat(translated_text,i);
		}
		if (temp == 'j')
		{
			text_uart[count] = 'j';
			count = count +1;
			strcat(translated_text,j);
		}
		if (temp == 'k')
		{
			text_uart[count] = 'k';
			count = count +1;
			strcat(translated_text,k);
		}
		if (temp == 'l')
		{
			text_uart[count] = 'l';
			count = count +1;
			strcat(translated_text,l);
		}
		if (temp == 'm')
		{
			text_uart[count] = 'm';
			count = count +1;
			strcat(translated_text,m);
		}
		if (temp == 'n')
		{
			text_uart[count] = 'n';
			count = count +1;
			strcat(translated_text,n);
		}
		if (temp == 'o')
		{
			text_uart[count] = 'o';
			count = count +1;
			strcat(translated_text,o);
		}
		if (temp == 'p')
		{
			text_uart[count] = 'p';
			count = count +1;
			strcat(translated_text,p);
		}
		if (temp == 'q')
		{
			text_uart[count] = 'q';
			count = count +1;
			strcat(translated_text,q);
		}
		if (temp == 'r')
		{
			text_uart[count] = 'r';
			count = count +1;
			strcat(translated_text,r);
		}
		if (temp == 's')
		{
			text_uart[count] = 's';
			count = count +1;
			strcat(translated_text,s);
		}
		if (temp == 't')
		{
			text_uart[count] = 't';
			count = count +1;
			strcat(translated_text,t);
		}
		if (temp == 'u')
		{
			text_uart[count] = 'u';
			count = count +1;
			strcat(translated_text,u);
		}
		if (temp == 'v')
		{
			text_uart[count] = 'v';
			count = count +1;
			strcat(translated_text,v);
		}
		if (temp == 'x')
		{
			text_uart[count] = 'x';
			count = count +1;
			strcat(translated_text,x);
		}
		if (temp == 'y')
		{
			text_uart[count] = 'y';
			count = count +1;
			strcat(translated_text,y);
		}
		if (temp == 'z')
		{
			text_uart[count] = 'z';
			count = count +1;
			strcat(translated_text,z);
		}
		if (temp == ' ')
		{
			text_uart[count] = ' ';
			count = count +1;
			strcat(translated_text,SPACE);
		}
		if (temp == '.')
		{
			text_uart[count] = '.';
			count = count + 1;
			catch_text_done = false;
			strcat(translated_text,end_point);
		}
		if (temp == 'w')
		{
			text_uart[count] = 'w';
			count = count +1;
			strcat(translated_text,w);
		}
				
	} while (catch_text_done);
	

}

void lcd_enter_text_state()		//Starts Enter text state
{
	lcd_clrscr();			//Clears LCD screen
	lcd_gotoxy(0,0);		//Goes to position 0,0 in LCD
	lcd_puts("Enter Text"); //Displays text in LCD
	TIMSK = 0b00000001;		//Starts Timer for LED Toggle
}

void option_setup()			//Starts Option menu
{
	bool option_setup_trigger_bool = true;
	
	do 
{
	if (!(PINB & (1 << (2))))	//Condition for Main action one sequence
		{
			option_setup_trigger_bool = false;					//Sets trigger 'false' for setup action
			main_action_sequence_global_bool = false;	//Sets trigger 'false' for loop main action
			
			while(!(PINB & (1 << (2))));
			
		}
		
		if (!(PINB & (1 << (3))))	//Condition for Main action loop sequence
		{
			option_setup_trigger_bool = false;					//Sets trigger 'false' for setup action
			main_action_sequence_global_bool = true;	//sets trigger 'true' for loop main action
			bool_printing = false;						//Disables Printing support
			
			while(!(PINB & (1 << (3))));
		}
} while (option_setup_trigger_bool);
}

void lcd_ready_state()		//Starts Ready state
{
	lcd_clrscr();		//Clears LCD screen
	lcd_gotoxy(0,0);	//Goes to position 0,0 in LCD
	lcd_puts("Ready");	//Displays text in LCD
	TIMSK = 0b00000000;	//Stops timer for LED Toggle
	PORTA= 0b00000111;	//Sets ready LED ON
}

void setup_state()			//Starts Setup state
{
	bool setup_trigger_bool = true;	//Trigger for end setup state loop
	do
	{
		if (!(PINB & (1 << (2))))	//Condition for enable/disable Printing support
		{
			PORTA ^= 0b00001000;	//Toggles Pin A3
			if (bool_printing)
			{
				bool_printing = false;
			}
			else
			{
				bool_printing = true;
			}
			while(!(PINB & (1 << (2))));
		}
		
		if (!(PINB & (1 << (3))))	//Condition for enable/disable Visual support
		{
			PORTA ^= 0b00010000;	//Toggles Pin A4
			if (bool_LEDs)
			{
				bool_LEDs = false;
			}
			else
			{
				bool_LEDs = true;
			}
			while(!(PINB & (1 << (3))));
		}
		
		if (!(PINB & (1 << (6))))	//Condition for enable/disable Audio support
		{
			PORTA ^= 0b00100000;	//Toggles Pin A5
			if (bool_buzzer)
			{
				bool_buzzer = false;
			} 
			else
			{
				bool_buzzer = true;
			}
			while(!(PINB & (1 << (6))));
		}
		
		if (!(PIND & (1 << (3))))	//Condition for Quiting setup state
		{
			setup_trigger_bool = false;	
			while(!(PIND & (1 << (3))));
		}
		
	} while(setup_trigger_bool);
	setup_trigger_bool = true;
}

void main_action_one_sequence()		//Apply main action one time
{
	main_action_sequence_global_bool = true;	//Sets timer overflow to monitor STOP button
	TIMSK = 0b00000001;							//Starts timer overflow
	char current_char_translated = NULL;
	int count_data = 0;
	int ii = 0;
		do 
{
	current_char_translated = translated_text[ii];		//Saves current char for future comparison
			if (current_char_translated == '5')			//Condition for end of sentence
			{
				TIMSK = 0b00000000;						//Stops timer overflow
				main_action_sequence_global_bool = false;
			} 
			if (current_char_translated == '.')
			{
				if ((bool_buzzer) && (bool_LEDs))
				{
					data[count_data] = 0;			//Saves data from translated text for future printing option
					count_data = count_data + 1;
					data[count_data] = 255;
					count_data = count_data + 1;
					_delay_ms(125);
					PORTC ^= 0b10000000;	//Turns on PINA5 for buzzer
					PORTA ^= 0b01000000;	//Turns on PINA4 for LED
					_delay_ms(250);
					PORTC ^= 0b10000000;	//Turns off PINA5 for buzzer
					PORTA ^= 0b01000000;	//Turns off PINA4 for LED
				} 
				else
				{
					if (bool_buzzer)
					{
						data[count_data] = 0;
						count_data = count_data + 1;
						data[count_data] = 255;
						count_data = count_data + 1;
						_delay_ms(125);
						PORTC ^= 0b10000000;	//Turns on PINA5 for buzzer
						_delay_ms(250);
						PORTC ^= 0b10000000;	//Turns off PINA5 for buzzer	
					}
					if (bool_LEDs)
					{
						data[count_data] = 0;
						count_data = count_data + 1;
						data[count_data] = 255;
						count_data = count_data + 1;
						_delay_ms(125);
						PORTA ^= 0b01000000;	//Turns on PINA4 for LED
						_delay_ms(250);
						PORTA ^= 0b01000000;	//Turns off PINA4 for LED
					}
					if (bool_printing)
					{
						data[count_data] = 0;
						count_data = count_data + 1;
						data[count_data] = 255;
						count_data = count_data + 1;
					}
				}
			}
			if (current_char_translated == '-')
			{
				if ((bool_buzzer) && (bool_LEDs))
				{
					data[count_data] = 0;
					count_data = count_data + 1;
					data[count_data] = 255;
					count_data = count_data + 1;
					data[count_data] = 255;
					count_data = count_data + 1;
					_delay_ms(125);
					PORTC ^= 0b10000000;	//Turns on PINA5 for buzzer
					PORTA ^= 0b01000000;	//Turns on PINA4 for LED
					_delay_ms(500);
					PORTC ^= 0b10000000;	//Turns off PINA5 for buzzer
					PORTA ^= 0b01000000;	//Turns off PINA4 for LED
				}
				else
				{
					if (bool_buzzer)
					{
						data[count_data] = 0;
						count_data = count_data + 1;
						data[count_data] = 255;
						count_data = count_data + 1;
						data[count_data] = 255;
						count_data = count_data + 1;
						_delay_ms(125);
						PORTC ^= 0b10000000;	//Turns on PINA5 for buzzer
						_delay_ms(500);
						PORTC ^= 0b10000000;	//Turns off PINA5 for buzzer
					}
					if (bool_LEDs)
					{
						data[count_data] = 0;
						count_data = count_data + 1;
						data[count_data] = 255;
						count_data = count_data + 1;
						data[count_data] = 255;
						count_data = count_data + 1;
						_delay_ms(125);
						PORTA ^= 0b01000000;	//Turns on PINA4 for LED
						_delay_ms(500);
						PORTA ^= 0b01000000;	//Turns off PINA4 for LED
					}
					if (bool_printing)
					{
						data[count_data] = 0;
						count_data = count_data + 1;
						data[count_data] = 255;
						count_data = count_data + 1;
						data[count_data] = 255;
						count_data = count_data + 1;
					}
				}
			}
			if (current_char_translated == '4')			//Condition for end of letter AND/OR SPACE
			{
				data[count_data] = 0;
				count_data = count_data + 1;
				_delay_ms(750);
			}
			ii = ii + 1;
} while (main_action_sequence_global_bool);
	
	int jj = 0;
	do									//Clears array translated_text for future use
{
	translated_text[jj] = NULL;
	jj = jj + 1;
} while (jj<=1001);

	jj = 0;
	do									//Clears array text_uart for future use
	{
		text_uart[jj] = NULL;
		jj = jj + 1;
	} while (jj<=102);
	
	if (bool_printing)					//Condition to Enable/Disable printing mode
	{
		mode = 1;
	}
	else
	{
		mode = 0;
	}
	
	bool_buzzer = false;
	bool_LEDs = false;
	bool_printing = false;
	
	PORTA= 0b00000111;
	
}

void main_action_loop_sequence()	//Apply main action on a loop sequence
{
	main_action_sequence_global_bool = true;	//Sets timer overflow to monitor STOP button
	TIMSK = 0b00000001;							//Starts timer overflow
	int count_data = 0;
	char current_char_translated = NULL;
	int ii = 0;
	do 
	{	
		
		current_char_translated = translated_text[ii];		//Saves current char for future comparison
		if (current_char_translated == '5')					//Condition for end of sentence
		{
			ii = 0;
			current_char_translated = translated_text[ii];
			_delay_ms(750);
		}
		if (current_char_translated == '.')
		{
			if ((bool_buzzer) && (bool_LEDs))
			{
				_delay_ms(125);
				PORTC ^= 0b10000000;	//Turns on PINA5 for buzzer
				PORTA ^= 0b01000000;	//Turns on PINA4 for LED
				_delay_ms(250);
				PORTC ^= 0b10000000;	//Turns off PINA5 for buzzer
				PORTA ^= 0b01000000;	//Turns off PINA4 for LED
			}
			else
			{
				if (bool_buzzer)
				{
					_delay_ms(125);
					PORTC ^= 0b10000000;	//Turns on PINA5 for buzzer
					_delay_ms(250);
					PORTC ^= 0b10000000;	//Turns off PINA5 for buzzer
				}
				if (bool_LEDs)
				{
					_delay_ms(125);
					PORTA ^= 0b01000000;	//Turns on PINA4 for LED
					_delay_ms(250);
					PORTA ^= 0b01000000;	//Turns off PINA4 for LED
				}
			}
		}
		if (current_char_translated == '-')
		{
			if ((bool_buzzer) && (bool_LEDs))
			{
				_delay_ms(125);
				PORTC ^= 0b10000000;	//Turns on PINA5 for buzzer
				PORTA ^= 0b01000000;	//Turns on PINA4 for LED
				_delay_ms(500);
				PORTC ^= 0b10000000;	//Turns off PINA5 for buzzer
				PORTA ^= 0b01000000;	//Turns off PINA4 for LED
			}
			else
			{
				if (bool_buzzer)
				{
					_delay_ms(125);
					PORTC ^= 0b10000000;	//Turns on PINA5 for buzzer
					_delay_ms(500);
					PORTC ^= 0b10000000;	//Turns off PINA5 for buzzer
				}
				if (bool_LEDs)
				{
					_delay_ms(125);
					PORTA ^= 0b01000000;	//Turns on PINA4 for LED
					_delay_ms(500);
					PORTA ^= 0b01000000;	//Turns off PINA4 for LED
				}
			}
		}
		if (current_char_translated == '4')
		{
			_delay_ms(750);
		}
		ii = ii + 1;
		
	} while (main_action_sequence_global_bool);
	
	TIMSK = 0b00000000;								//Stops timer overflow
	main_action_sequence_global_bool = false;
	
	int jj = 0;
	do												//Clears array translated_text for future use
	{
		translated_text[jj] = NULL;
		jj = jj + 1;
	} while (jj<=1001);

	jj=0;
	do												//Clears array text_uart for future use
	{
		text_uart[jj] = NULL;
		jj = jj + 1;
	} while (jj<=102);
	
	bool_buzzer = false;
	bool_LEDs = false;
	bool_printing = false;
	PORTA= 0b00000111;
	
}

void printing_state()		//Starts Printing state
{
	bool printing_routing_bool_trigger = true;
	TIMSK = 0b10000000;
	do 
	{
		if (mode == 1)	//Go to mode 1 temperature measurement
		{
			ADCConvert();	//ADC conversion for temperature measurement
		}
		
		if (mode == 3)	//Go to mode 3 (SPI communication)
		{
			SPIcom();	//Send data to thermal printer
		}
		if (mode == 0)
		{
			printing_routing_bool_trigger = false;
				int kk = 0;
				do
				{
					data[kk] = 0;
					kk = kk + 1;
				} while (kk<=48);
		}
	} while (printing_routing_bool_trigger);
	TIMSK = 0b00000000;
}

void Running_state()		//Starts running sequence indicator
{
	lcd_clrscr();		//Clears LCD screen
	lcd_gotoxy(0,0);	//Goes to position 0,0 in LCD
	lcd_puts("Running");	//Displays text in LCD
}

void option_state()			//Starts Option state
{
	lcd_clrscr();		//Clears LCD screen
	lcd_gotoxy(0,0);	//Goes to position 0,0 in LCD
	lcd_puts("Option Menu");	//Displays text in LCD
}

unsigned char USART_RECEIVE_CHARACTER()		//Starts serial data acquisition 
{
	while ( !(UCSRA & (1 << RXC)) ); //Wait for the RXC to not have 0
	return UDR; //Get the data
}

void ADCConvert ()		//Starts ADC Method
{

}

void Motor1 ()	//Feed paper 40 lines (mode 2)
{

}

void SPIcom ()	//Send data to printer (mode 3)
{

}

void Latching ()	//Put data in latch register (mode 4)
{

}

void Strobe ()	//Turn on strobes on thermal head (mode 5)
{

}

void Motor2 ()	//Feed paper one line (mode 6)
{

	
}

void Delay ()	//mode 7 (delay)
{

}

void paper_feed()	//Feed paper 125 lines (mode 2)
{

}

void Motor3()
{

}


#pragma endregion PROJECT
